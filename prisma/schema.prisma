generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String     @unique
  password      String
  role          Role       @default(admin)
  emailVerified DateTime?
  isApproved    Boolean    @default(false)
  categories    Category[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("users")
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String      @unique
  price       Float
  description String?
  storage     String
  image       String?
  variants    Variant[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  OrderItem   OrderItem[]

  @@map("products")
}

model RepairProduct {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  slug           String           @unique
  RepairServices RepairServices[]
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt

  @@map("repairproducts")
}

model RepairServices {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  price             Float
  description       String?
  estimatedTime     String?
  type              RepairService
  Product           RepairProduct?      @relation(fields: [productId], references: [id])
  productId         String?             @db.ObjectId
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  OrderServicesItem OrderServicesItem[]
  variants          Variant[]

  @@map("repairservices")
}

model Variant {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  price            Float
  discount         Int?
  product          Product?        @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId        String?         @db.ObjectId
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  RepairServices   RepairServices? @relation(fields: [repairServicesId], references: [id], onDelete: Cascade)
  repairServicesId String?         @db.ObjectId

  @@map("variants")
}

model Order {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  contactNumber     String
  email             String?
  orderStatus       OrderStatus
  price             Float
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  OrderServicesItem OrderServicesItem[]
  orderProducts     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  products  Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  quantity  Int
  Order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId

  @@map("orderitems")
}

model OrderServicesItem {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  services  RepairServices @relation(fields: [serviceId], references: [id])
  serviceId String         @db.ObjectId
  orderId   String         @db.ObjectId
  order     Order          @relation(fields: [orderId], references: [id])
  quantity  Int

  @@map("orderservicesitems")
}

enum Role {
  admin
  superadmin
}

enum OrderStatus {
  pending
  paid
}

enum RepairService {
  basic
  screen
  glass
}

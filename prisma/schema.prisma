generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String     @unique
  password      String
  role          Role       @default(admin)
  emailVerified DateTime?
  isApproved    Boolean    @default(false)
  categories    Category[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("users")
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  slug      String    @unique
  products  Product[]
  user      User?     @relation(fields: [userId], references: [id])
  userId    String?   @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@map("categories")
}

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  slug        String      @unique
  price       Float
  description String?
  storage     String
  image       String?
  variants    Variant[]
  category    Category    @relation(fields: [categoryId], references: [id])
  categoryId  String      @db.ObjectId
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  orderItem   OrderItem[]

  @@map("products")
}

model RepairBrand {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  repairCategories RepairCategory[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("repairbrand")
}

model RepairCategory {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  repairBrand    RepairBrand     @relation(fields: [repairBrandId], references: [id])
  repairBrandId  String          @db.ObjectId
  repairProducts RepairProduct[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@map("repaircategory")
}

model RepairProduct {
  id               String           @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  repairCategory   RepairCategory   @relation(fields: [repairCategoryId], references: [id])
  repairCategoryId String           @db.ObjectId
  repairServices   RepairServices[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt

  @@map("repairproduct")
}

model RepairServices {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  price             Float
  type              RepairService
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  repairProduct     RepairProduct       @relation(fields: [repairProductId], references: [id])
  repairProductId   String              @db.ObjectId
  orderServicesItem OrderServicesItem[]

  @@map("repairservices")
}

model Variant {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  price     Float
  discount  Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String?  @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("variants")
}

model Order {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  contactNumber     String
  email             String?
  trxId             String?
  orderStatus       OrderStatus
  price             Float
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  orderServicesItem OrderServicesItem[]
  orderProducts     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  products  Product? @relation(fields: [productId], references: [id])
  productId String?  @db.ObjectId
  quantity  Int
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String   @db.ObjectId

  @@map("orderitems")
}

model OrderServicesItem {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  orderId  String @db.ObjectId
  order    Order  @relation(fields: [orderId], references: [id])
  quantity Int

  repairServices   RepairServices @relation(fields: [repairServicesId], references: [id])
  repairServicesId String         @db.ObjectId

  @@map("orderservicesitems")
}

enum Role {
  admin
  superadmin
}

enum OrderStatus {
  pending
  paid
}

enum RepairService {
  screen
  battery
  charging
  service
}
